#!/usr/bin/python
import sys
from PySide.QtCore import *
from PySide.QtGui import *
from depth_map_methods_py import Pyimage_stack
import matplotlib.pylab as plt
import numpy2qimage

__appname__ = "Shape From Focus Refocus"

class refocusImage(QLabel):

    focusChanged = Signal(int)

    def __init__(self, stack, parent = None):
        QLabel.__init__(self)

        self.stack = stack
        print self.stack.scaled_width
        print self.stack.scaled_height

        #Set up the image pixmap
        self.setMinimumSize(600, 400)
        self.setScaledContents(False)
        plt.imshow(self.stack.focused_image)
        plt.show()
        self.refocused_pixmap = numpy2qpixmap(self.stack.focused_image)
        self.setPixmap(self.refocused_pixmap)

    def updateImage(self):
        print "updateImage..."
        self.refocused_pixmap = numpy2qpixmap(self.stack.refocused_image)
        self.setPixmap(self.refocused_pixmap)

    def mouseRefocus(self, QMouseEvent):
        pos = QMouseEvent.pos()
        print "mouseRefocus", pos
        depth = self.stack.refocus_by_point(pos.y(), pos.x())
        self.updateImage()
        self.focusChanged.emit(depth)

    def valueRefocus(self, depth):
        print "valueRefocus"
        self.stack.refocus(1, depth)
        self.updateImage()

    def mousePressEvent(self, QMouseEvent):
        print "mousePressEvent"
        self.mouseRefocus(QMouseEvent)

    def mouseMoveEvent(self, QMouseEvent):
        print "mouseMoveEvent"
        self.mouseRefocus(QMouseEvent)

    def resizeEvent(self, QResizeEvent):
        print "resizeEvent"
        self.stack.resize(self.width(), self.height())
        self.updateImage()


class Program(QDialog):
    def __init__(self, stack, parent = None):
        super(Program, self).__init__(parent)
        self.setWindowTitle(__appname__)

        self.stack = stack

        #Set up the refocusing sliders
        focus_label = QLabel("Focus depth")
        dof_label = QLabel("Depth of Field")
        self.focusSlider = QSlider(Qt.Horizontal)
        self.dofSlider = QSlider(Qt.Horizontal)
        self.focusSlider.setMaximum(18)
        self.focusSlider.setMinimum(0)
        self.dofSlider.setMaximum(18)
        self.dofSlider.setMinimum(0)

        #Align the widgets in their containers
        options_layout = QVBoxLayout()
        options_layout.addWidget(focus_label)
        options_layout.addWidget(self.focusSlider)
        options_layout.addWidget(dof_label)
        options_layout.addWidget(self.dofSlider)


        #Create a refocused_image
        self.refocusImage = refocusImage(stack);

        #Final Layout setup
        layout = QHBoxLayout()
        layout.addWidget(self.refocusImage)
        layout.addItem(options_layout)
        self.setLayout(layout)

        #Connect sliders to the refocusImage
        self.focusSlider.sliderMoved.connect(self.refocusImage.valueRefocus)
        self.refocusImage.focusChanged.connect(self.focusSlider.setValue)

#Convert numpy to pixmap image TODO move to library
def numpy2qpixmap(cvBGRImg):
    qimg = numpy2qimage.toQImage(cvBGRImg)
    Qpixmap_Img = QPixmap.fromImage(qimg)
    return Qpixmap_Img

def main():
    sys.argv[0] = "Shape From Focus"
    img_dir = sys.argv[1]
    stack = Pyimage_stack(img_dir, 5000, 600, 400)
    app = QApplication(sys.argv)
    form = Program(stack)
    form.show()
    app.exec_()

if __name__ == '__main__':
    main()
