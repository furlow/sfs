#!/usr/bin/python
import sys
from PySide.QtCore import *
from PySide.QtGui import *
from depth_map_methods_py import Pyimage_stack
import matplotlib.pylab as plt
import cv2
import numpy2qimage

RELOAD = 1
RECREATE = 0
ALIGN_ON = 1
ALIGN_OFF = 0

__appname__ = "Shape From Focus Refocus"

class refocusImage(QLabel):

    focusChanged = Signal(int)
    dofChanged = Signal(int)

    def __init__(self, stack, parent = None):
        QLabel.__init__(self)

        self.stack = stack
        self.mode = "Single Point Focus"
        self.points = 0
        self.point1 = 0
        self.point2 = 0

        #Set up the image pixmap
        self.setMinimumSize(1200, 800)
        self.setScaledContents(False)
        self.focused_pixmap = numpy2qpixmap(self.stack.focused_image)

    def updateImage(self):
        print "updateImage..."
        self.refocused_pixmap = numpy2qpixmap(self.stack.refocused_image)
        self.setPixmap(self.refocused_pixmap)

    def mouseRefocus(self, QMouseEvent):
        pos = QMouseEvent.pos()
        if self.mode.find("Single Point Focus") == 0:
            print "Single Point Refocus: ", pos
            depth = self.stack.refocus_by_point(pos.y(), pos.x())
            self.updateImage()
            self.focusChanged.emit(depth)
        else:
            if self.points == 0:
                print "Point 1: ", pos
                self.point1 = pos
                self.points = 1
            elif self.points == 1:
                print "Point 2: ", pos
                self.point2 = pos
                self.points = 0

                if self.mode.find("Double Point Focus") == 0:
                    print "Double Point Refocus"
                    self.stack.refocus_multiple(self.point1.y(), self.point1.x(), self.point2.y(), self.point2.x())
                elif self.mode.find("Between Point Focus") == 0:
                    print "Between Point Focus"
                    depth, depth_of_feild = self.stack.refocus_between_points(self.point1.y(), self.point1.x(), self.point2.y(), self.point2.x())
                    self.focusChanged.emit(depth)
                    self.dofChanged.emit(depth_of_feild)
                self.updateImage()

    def valueRefocus(self, depth):
        print "valueRefocus, depth: ", depth
        self.stack.refocus(depth)
        self.updateImage()

    def setDof(self, depth_of_feild):
        print "setDof, dof: ", depth_of_feild
        self.stack.setDof(depth_of_feild)
        self.updateImage()

    def setDefocus(self, defocus):
        print "setDefocus, defocus: ", defocus
        self.stack.setDefocus(defocus)
        self.updateImage()

    def mousePressEvent(self, QMouseEvent):
        print "mousePressEvent"
        self.mouseRefocus(QMouseEvent)

    def mouseMoveEvent(self, QMouseEvent):
        print "mouseMoveEvent"
        self.mouseRefocus(QMouseEvent)

    def resizeEvent(self, QResizeEvent):
        print "resizeEvent"
        self.stack.resize(self.width(), self.height())
        self.updateImage()

    def setRefocusMode(self, mode):
        print "setRefocusMode: ", mode
        self.mode = mode

class Program(QDialog):
    def __init__(self, stack, parent = None):
        super(Program, self).__init__(parent)
        self.setWindowTitle(__appname__)

        self.stack = stack

        #Set up the refocusing sliders
        focus_label = QLabel("Focus depth")
        dof_label = QLabel("Depth of Field")
        defocus_label = QLabel("Defocus Amount")
        mode_label = QLabel("Refocus Mode")
        self.focusSlider = QSlider(Qt.Horizontal)
        self.dofSlider = QSlider(Qt.Horizontal)
        self.defocusSlider = QSlider(Qt.Horizontal)
        self.focusSlider.setMaximum(self.stack.size)
        self.focusSlider.setMinimum(0)
        self.dofSlider.setMaximum(self.stack.size)
        self.dofSlider.setMinimum(0)
        self.defocusSlider.setMaximum(5)
        self.defocusSlider.setMinimum(1)

        #Set up combobox for mode selection
        self.mode = QComboBox()
        self.mode.addItem("Single Point Focus")
        self.mode.addItem("Double Point Focus")
        self.mode.addItem("Between Point Focus")

        #Create button for saving an image & connect to save function
        self.save_refocused_button = QPushButton("Save Refocused Image")
        self.save_focused_button = QPushButton("Save Focused Image")
        self.save_depthmap_button = QPushButton("Save Depth Map")

        #Align the widgets in their containers
        options_layout = QVBoxLayout()
        options_layout.addWidget(self.mode)
        options_layout.addWidget(focus_label)
        options_layout.addWidget(self.focusSlider)
        options_layout.addWidget(dof_label)
        options_layout.addWidget(self.dofSlider)
        options_layout.addWidget(defocus_label)
        options_layout.addWidget(self.defocusSlider)
        options_layout.addWidget(self.save_focused_button)
        options_layout.addWidget(self.save_refocused_button)
        options_layout.addWidget(self.save_depthmap_button)


        #Create a refocused_image
        self.refocusImage = refocusImage(stack);

        #Final Layout setup
        layout = QHBoxLayout()
        layout.addWidget(self.refocusImage)
        layout.addItem(options_layout)
        self.setLayout(layout)

        #Connect sliders to the refocusImage
        self.focusSlider.sliderMoved.connect(self.refocusImage.valueRefocus)
        self.refocusImage.focusChanged.connect(self.focusSlider.setValue)
        self.dofSlider.sliderMoved.connect(self.refocusImage.setDof)
        self.refocusImage.dofChanged.connect(self.dofSlider.setValue)
        self.defocusSlider.sliderMoved.connect(self.refocusImage.setDefocus)
        self.mode.currentIndexChanged[str].connect(self.refocusImage.setRefocusMode)

        #connect to functions for saving
        self.save_refocused_button.clicked.connect(self.saveRefocused)
        self.save_depthmap_button.clicked.connect(self.saveDepthMap)
        self.save_focused_button.clicked.connect(self.saveFocused)


    def saveRefocused(self):
        filename, _ = QFileDialog.getSaveFileName(self,
        "Save Image", "/Users/josh/", "Image Files (*.png *.jpg *.bmp)")
        cv2.imwrite(filename, cv2.cvtColor(self.stack.refocused_image, cv2.cv.CV_BGR2RGB))

    def saveDepthMap(self):
        filename, _ = QFileDialog.getSaveFileName(self,
        "Save Image", "/Users/josh/Documents/", "Image Files (*.png *.jpg *.bmp)")
        cv2.imwrite(filename, cv2.cvtColor(self.stack.depth_map, cv2.cv.CV_BGR2RGB))

    def saveFocused(self):
        filename, _ = QFileDialog.getSaveFileName(self,
        "Save Image", "/Users/josh/", "Image Files (*.png *.jpg *.bmp)")
        cv2.imwrite(filename, cv2.cvtColor(self.stack.focused_image, cv2.cv.CV_BGR2RGB))



#Convert numpy to pixmap image TODO move to library
def numpy2qpixmap(numpyImg):
    qimg = numpy2qimage.toQImage(numpyImg)
    Qpixmap_Img = QPixmap.fromImage(qimg)
    return Qpixmap_Img

def main():
    sys.argv[0] = "Shape From Focus"
    img_dir = sys.argv[1]
    stack = Pyimage_stack(img_dir, 2000, 20, 600, 400, ALIGN_ON, RECREATE)
    app = QApplication(sys.argv)
    form = Program(stack)
    form.show()
    app.exec_()

if __name__ == '__main__':
    main()
