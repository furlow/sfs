#!/usr/bin/python
import sys
from PySide.QtCore import *
from PySide.QtGui import *
from shape_from_focus import process_stack
import cv2
import numpy2qimage

__appname__ = "Shape From Focus Refocus"

class refocusImage(QLabel):

    focusChanged = Signal(int)

    def __init__(self, stack, parent = None):
        QLabel.__init__(self)

        self.stack = stack
        print self.stack.width
        print self.stack.height

        #Set up the image pixmap
        self.refocused_pixmap = numpy2qpixmap( self.stack.focused_image )
        self.setPixmap(self.refocused_pixmap.scaled(200, 200, Qt.KeepAspectRatio))
        self.setScaledContents(False)
        self.setMinimumSize(600, 400)

    def updateImage(self):
        self.refocused_pixmap = numpy2qpixmap(self.stack.refocused_image)
        self.setPixmap(self.refocused_pixmap.scaled(self.width(), self.height(), Qt.KeepAspectRatio))

    def mouseRefocus(self, QMouseEvent):
        pos = QMouseEvent.pos()
        print pos
        x_point = self.x_scale * pos.x()
        y_point = self.y_scale * pos.y()
        print x_point, y_point
        depth = self.stack.refocus_by_point(y_point, x_point)
        self.updateImage()
        self.focusChanged.emit(depth)

    def valueRefocus(self, depth):
        self.stack.refocus(1, depth)
        self.updateImage()

    def mousePressEvent(self, QMouseEvent):
        self.mouseRefocus(QMouseEvent)

    def mouseMoveEvent(self, QMouseEvent):
        self.mouseRefocus(QMouseEvent)

    def resizeEvent(self, QResizeEvent):
        self.setPixmap(self.refocused_pixmap.scaled(self.width(), self.height(), Qt.KeepAspectRatio))
        self.x_scale = self.stack.width /  float( QResizeEvent.size().width() )
        self.y_scale = self.stack.height / float( QResizeEvent.size().height() )
        print self.x_scale, self.y_scale

class Program(QDialog):
    def __init__(self, stack, parent = None):
        super(Program, self).__init__(parent)
        self.setWindowTitle(__appname__)

        self.stack = stack

        #Set up the refocusing sliders
        focus_label = QLabel("Focus depth")
        dof_label = QLabel("Depth of Field")
        self.focusSlider = QSlider(Qt.Horizontal)
        self.dofSlider = QSlider(Qt.Horizontal)
        self.focusSlider.setMaximum(18)
        self.focusSlider.setMinimum(0)
        self.dofSlider.setMaximum(18)
        self.dofSlider.setMinimum(0)

        #Align the widgets in their containers
        options_layout = QVBoxLayout()
        options_layout.addWidget(focus_label)
        options_layout.addWidget(self.focusSlider)
        options_layout.addWidget(dof_label)
        options_layout.addWidget(self.dofSlider)


        #Create a refocused_image
        self.refocusImage = refocusImage(stack);

        #Final Layout setup
        layout = QHBoxLayout()
        layout.addWidget(self.refocusImage)
        layout.addItem(options_layout)
        self.setLayout(layout)

        #Connect sliders to the refocusImage
        self.focusSlider.valueChanged.connect(self.refocusImage.valueRefocus)
        self.refocusImage.focusChanged.connect(self.focusSlider.setValue)

def numpy2qpixmap(cvBGRImg):
    #convert from BGR to RGB
    #cvBGRImg = cv2.cvtColor(cvBGRImg, cv2.cv.CV_BGR2RGB)

    #convert numpy to pixmap image
    qimg = numpy2qimage.toQImage(cvBGRImg)
    Qpixmap_Img = QPixmap.fromImage(qimg)

    return Qpixmap_Img

def main():
    sys.argv[0] = "Shape From Focus"
    img_dir = sys.argv[1]
    stack  = process_stack(img_dir)
    app = QApplication(sys.argv)
    form = Program(stack)
    form.show()
    app.exec_()

if __name__ == '__main__':
    main()
